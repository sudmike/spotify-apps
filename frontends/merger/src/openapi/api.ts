/* tslint:disable */
/* eslint-disable */
/**
 * Spotify apps NestJS backend
 * The API for the Spotify apps
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ArtistFull
 */
export interface ArtistFull {
    /**
     * Number of songs to select from the artist
     * @type {number}
     * @memberof ArtistFull
     */
    'number': number;
    /**
     * The ID of the \'This is XYZ\' playlist
     * @type {string}
     * @memberof ArtistFull
     */
    'playlist': string;
    /**
     * The ID of the artist
     * @type {string}
     * @memberof ArtistFull
     */
    'id': string;
    /**
     * The name of the artist
     * @type {string}
     * @memberof ArtistFull
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ArtistResponseFull
 */
export interface ArtistResponseFull {
    /**
     * Array of URLs to artist images
     * @type {Array<string>}
     * @memberof ArtistResponseFull
     */
    'images': Array<string>;
    /**
     * Number of songs to select from the artist
     * @type {number}
     * @memberof ArtistResponseFull
     */
    'number': number;
    /**
     * The ID of the \'This is XYZ\' playlist
     * @type {string}
     * @memberof ArtistResponseFull
     */
    'playlist': string;
    /**
     * The ID of the artist
     * @type {string}
     * @memberof ArtistResponseFull
     */
    'id': string;
    /**
     * The name of the artist
     * @type {string}
     * @memberof ArtistResponseFull
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GeneratePlaylistResponseSchema
 */
export interface GeneratePlaylistResponseSchema {
    /**
     * The ID of the generated playlist
     * @type {string}
     * @memberof GeneratePlaylistResponseSchema
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface GetPlaylistResponseSchema
 */
export interface GetPlaylistResponseSchema {
    /**
     * The ID of the playlist
     * @type {string}
     * @memberof GetPlaylistResponseSchema
     */
    'id': string;
    /**
     * 
     * @type {PlaylistsResponse}
     * @memberof GetPlaylistResponseSchema
     */
    'playlist': PlaylistsResponse;
    /**
     * 
     * @type {Array<ArtistResponseFull>}
     * @memberof GetPlaylistResponseSchema
     */
    'artists': Array<ArtistResponseFull>;
    /**
     * 
     * @type {MetadataResponse}
     * @memberof GetPlaylistResponseSchema
     */
    'metadata': MetadataResponse;
}
/**
 * 
 * @export
 * @interface MetadataResponse
 */
export interface MetadataResponse {
    /**
     * Timestamp of last update
     * @type {number}
     * @memberof MetadataResponse
     */
    'updated': number;
    /**
     * Timestamp of creation
     * @type {number}
     * @memberof MetadataResponse
     */
    'created': number;
    /**
     * Defines if playlist refreshing is set to active or not
     * @type {boolean}
     * @memberof MetadataResponse
     */
    'active': boolean;
    /**
     * Refresh playlist every X days
     * @type {number}
     * @memberof MetadataResponse
     */
    'frequency': number;
}
/**
 * 
 * @export
 * @interface PlaylistsResponse
 */
export interface PlaylistsResponse {
    /**
     * The name of the playlist
     * @type {string}
     * @memberof PlaylistsResponse
     */
    'name': string;
    /**
     * The description of the playlist
     * @type {string}
     * @memberof PlaylistsResponse
     */
    'description': string;
    /**
     * Array of URLs to playlist images
     * @type {Array<string>}
     * @memberof PlaylistsResponse
     */
    'images': Array<string>;
}
/**
 * 
 * @export
 * @interface SearchArtistResponseSchema
 */
export interface SearchArtistResponseSchema {
    /**
     * The search query
     * @type {string}
     * @memberof SearchArtistResponseSchema
     */
    'query': string;
    /**
     * Offset to the next artist batch
     * @type {number}
     * @memberof SearchArtistResponseSchema
     */
    'next': number | null;
    /**
     * 
     * @type {SearchArtistResponseSchemaArtist}
     * @memberof SearchArtistResponseSchema
     */
    'artist': SearchArtistResponseSchemaArtist | null;
}
/**
 * The artist that is returned
 * @export
 * @interface SearchArtistResponseSchemaArtist
 */
export interface SearchArtistResponseSchemaArtist {
    /**
     * Array of URLs to artist images
     * @type {Array<string>}
     * @memberof SearchArtistResponseSchemaArtist
     */
    'images': Array<string>;
    /**
     * Number of songs to select from the artist
     * @type {number}
     * @memberof SearchArtistResponseSchemaArtist
     */
    'number': number;
    /**
     * The ID of the \'This is XYZ\' playlist
     * @type {string}
     * @memberof SearchArtistResponseSchemaArtist
     */
    'playlist': string;
    /**
     * The ID of the artist
     * @type {string}
     * @memberof SearchArtistResponseSchemaArtist
     */
    'id': string;
    /**
     * The name of the artist
     * @type {string}
     * @memberof SearchArtistResponseSchemaArtist
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface SubmitPlaylistSchema
 */
export interface SubmitPlaylistSchema {
    /**
     * Contains IDs of \'This is XYZ\' playlists and their artists IDs and names
     * @type {Array<ArtistFull>}
     * @memberof SubmitPlaylistSchema
     */
    'parts': Array<ArtistFull>;
    /**
     * Defines if playlist refreshing is set to active or not
     * @type {boolean}
     * @memberof SubmitPlaylistSchema
     */
    'active': boolean;
    /**
     * Refresh playlist every X days
     * @type {number}
     * @memberof SubmitPlaylistSchema
     */
    'frequency': number;
    /**
     * Defines if the title of the playlist should be updated
     * @type {boolean}
     * @memberof SubmitPlaylistSchema
     */
    'updateTitle': boolean;
    /**
     * Defines if the description of the playlist should be updated
     * @type {boolean}
     * @memberof SubmitPlaylistSchema
     */
    'updateDescription': boolean;
}

/**
 * MergerApi - axios parameter creator
 * @export
 */
export const MergerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerCheckAuth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merger/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitPlaylistSchema} submitPlaylistSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerGeneratePlaylist: async (submitPlaylistSchema: SubmitPlaylistSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitPlaylistSchema' is not null or undefined
            assertParamExists('mergerControllerGeneratePlaylist', 'submitPlaylistSchema', submitPlaylistSchema)
            const localVarPath = `/merger/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitPlaylistSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerGetPlaylist: async (playlist: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlist' is not null or undefined
            assertParamExists('mergerControllerGetPlaylist', 'playlist', playlist)
            const localVarPath = `/merger/playlists/{playlist}`
                .replace(`{${"playlist"}}`, encodeURIComponent(String(playlist)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerGetPlaylists: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merger/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerRefreshPlaylist: async (playlist: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlist' is not null or undefined
            assertParamExists('mergerControllerRefreshPlaylist', 'playlist', playlist)
            const localVarPath = `/merger/playlists/{playlist}/refresh`
                .replace(`{${"playlist"}}`, encodeURIComponent(String(playlist)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name The name of the artist to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerSearchArtist: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('mergerControllerSearchArtist', 'name', name)
            const localVarPath = `/merger/artist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerSetPlaylistActive: async (playlist: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlist' is not null or undefined
            assertParamExists('mergerControllerSetPlaylistActive', 'playlist', playlist)
            const localVarPath = `/merger/playlists/{playlist}/active`
                .replace(`{${"playlist"}}`, encodeURIComponent(String(playlist)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerSetPlaylistInactive: async (playlist: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlist' is not null or undefined
            assertParamExists('mergerControllerSetPlaylistInactive', 'playlist', playlist)
            const localVarPath = `/merger/playlists/{playlist}/inactive`
                .replace(`{${"playlist"}}`, encodeURIComponent(String(playlist)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} playlist 
         * @param {SubmitPlaylistSchema} submitPlaylistSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerUpdatePlaylist: async (playlist: string, submitPlaylistSchema: SubmitPlaylistSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlist' is not null or undefined
            assertParamExists('mergerControllerUpdatePlaylist', 'playlist', playlist)
            // verify required parameter 'submitPlaylistSchema' is not null or undefined
            assertParamExists('mergerControllerUpdatePlaylist', 'submitPlaylistSchema', submitPlaylistSchema)
            const localVarPath = `/merger/playlists/{playlist}`
                .replace(`{${"playlist"}}`, encodeURIComponent(String(playlist)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitPlaylistSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MergerApi - functional programming interface
 * @export
 */
export const MergerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MergerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerCheckAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerCheckAuth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubmitPlaylistSchema} submitPlaylistSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerGeneratePlaylist(submitPlaylistSchema: SubmitPlaylistSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePlaylistResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerGeneratePlaylist(submitPlaylistSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerGetPlaylist(playlist: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPlaylistResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerGetPlaylist(playlist, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerGetPlaylists(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPlaylistResponseSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerGetPlaylists(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerRefreshPlaylist(playlist: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerRefreshPlaylist(playlist, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name The name of the artist to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerSearchArtist(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchArtistResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerSearchArtist(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerSetPlaylistActive(playlist: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerSetPlaylistActive(playlist, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerSetPlaylistInactive(playlist: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerSetPlaylistInactive(playlist, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} playlist 
         * @param {SubmitPlaylistSchema} submitPlaylistSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergerControllerUpdatePlaylist(playlist: string, submitPlaylistSchema: SubmitPlaylistSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePlaylistResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergerControllerUpdatePlaylist(playlist, submitPlaylistSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MergerApi - factory interface
 * @export
 */
export const MergerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MergerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerCheckAuth(options?: any): AxiosPromise<void> {
            return localVarFp.mergerControllerCheckAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubmitPlaylistSchema} submitPlaylistSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerGeneratePlaylist(submitPlaylistSchema: SubmitPlaylistSchema, options?: any): AxiosPromise<GeneratePlaylistResponseSchema> {
            return localVarFp.mergerControllerGeneratePlaylist(submitPlaylistSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerGetPlaylist(playlist: string, options?: any): AxiosPromise<GetPlaylistResponseSchema> {
            return localVarFp.mergerControllerGetPlaylist(playlist, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerGetPlaylists(options?: any): AxiosPromise<Array<GetPlaylistResponseSchema>> {
            return localVarFp.mergerControllerGetPlaylists(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerRefreshPlaylist(playlist: string, options?: any): AxiosPromise<void> {
            return localVarFp.mergerControllerRefreshPlaylist(playlist, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name The name of the artist to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerSearchArtist(name: string, options?: any): AxiosPromise<SearchArtistResponseSchema> {
            return localVarFp.mergerControllerSearchArtist(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerSetPlaylistActive(playlist: string, options?: any): AxiosPromise<void> {
            return localVarFp.mergerControllerSetPlaylistActive(playlist, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} playlist 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerSetPlaylistInactive(playlist: string, options?: any): AxiosPromise<void> {
            return localVarFp.mergerControllerSetPlaylistInactive(playlist, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} playlist 
         * @param {SubmitPlaylistSchema} submitPlaylistSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergerControllerUpdatePlaylist(playlist: string, submitPlaylistSchema: SubmitPlaylistSchema, options?: any): AxiosPromise<GeneratePlaylistResponseSchema> {
            return localVarFp.mergerControllerUpdatePlaylist(playlist, submitPlaylistSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MergerApi - object-oriented interface
 * @export
 * @class MergerApi
 * @extends {BaseAPI}
 */
export class MergerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerCheckAuth(options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerCheckAuth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubmitPlaylistSchema} submitPlaylistSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerGeneratePlaylist(submitPlaylistSchema: SubmitPlaylistSchema, options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerGeneratePlaylist(submitPlaylistSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} playlist 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerGetPlaylist(playlist: string, options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerGetPlaylist(playlist, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerGetPlaylists(options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerGetPlaylists(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} playlist 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerRefreshPlaylist(playlist: string, options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerRefreshPlaylist(playlist, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name The name of the artist to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerSearchArtist(name: string, options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerSearchArtist(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} playlist 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerSetPlaylistActive(playlist: string, options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerSetPlaylistActive(playlist, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} playlist 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerSetPlaylistInactive(playlist: string, options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerSetPlaylistInactive(playlist, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} playlist 
     * @param {SubmitPlaylistSchema} submitPlaylistSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerApi
     */
    public mergerControllerUpdatePlaylist(playlist: string, submitPlaylistSchema: SubmitPlaylistSchema, options?: AxiosRequestConfig) {
        return MergerApiFp(this.configuration).mergerControllerUpdatePlaylist(playlist, submitPlaylistSchema, options).then((request) => request(this.axios, this.basePath));
    }
}


